{"version":3,"file":"static/js/793.7b54bbcf.chunk.js","mappings":"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","sources":["sections/auth/verify-code/VerifyCodeForm.js","pages/auth/VerifyCode.js"],"sourcesContent":["import * as Yup from 'yup';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport jwtDecode from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n// form\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport { OutlinedInput, Stack } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// routes\r\nimport { PATH_AUTH, PATH_DASHBOARD } from '../../../routes/paths';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function VerifyCodeForm() {\r\n  const navigate = useNavigate();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const VerifyCodeSchema = Yup.object().shape({\r\n    code1: Yup.string().required('Code is required'),\r\n    code2: Yup.string().required('Code is required'),\r\n    code3: Yup.string().required('Code is required'),\r\n    code4: Yup.string().required('Code is required'),\r\n    code5: Yup.string().required('Code is required'),\r\n    code6: Yup.string().required('Code is required'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    code1: '',\r\n    code2: '',\r\n    code3: '',\r\n    code4: '',\r\n    code5: '',\r\n    code6: '',\r\n  };\r\n\r\n  const {\r\n    watch,\r\n    control,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { isSubmitting, isValid },\r\n  } = useForm({\r\n    mode: 'onBlur',\r\n    resolver: yupResolver(VerifyCodeSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const values = watch();\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('paste', handlePasteClipboard);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const onSubmit = async (data) => {\r\n\r\n    const accessToken = window.localStorage.getItem('accessToken');\r\n    let id = null;\r\n    if (accessToken) {\r\n      id = jwtDecode(accessToken).userId;\r\n    }\r\n    if (!id || !accessToken) {\r\n      enqueueSnackbar('Please login again!', { variant: 'error' });\r\n      window.localStorage.removeItem('accessToken')\r\n      navigate(PATH_AUTH.login, { replace: true });\r\n\r\n    }\r\n\r\n    const code = Object.values(data).join('');\r\n\r\n    axios.defaults.headers.common = {\r\n      'authorization': `${accessToken}`\r\n    };\r\n\r\n    axios.put(`http://localhost:3000/verify/${id}`, { verificationCode: code })\r\n      .then((res) => {\r\n        enqueueSnackbar('Verify success!');\r\n        const newAccessToken = res.data.jwt;\r\n        window.localStorage.setItem('accessToken', newAccessToken)\r\n        navigate(PATH_DASHBOARD.root, { replace: true });\r\n      })\r\n\r\n      .catch((error) => {\r\n        if (error.response.status === 401) {\r\n          enqueueSnackbar('Unauthorized!', { variant: 'error' });\r\n\r\n          window.localStorage.removeItem('accessToken').then((res) => {\r\n            navigate(PATH_AUTH.login, { replace: true });\r\n          });\r\n        }\r\n        if (error.response.status === 400) {\r\n          enqueueSnackbar('Wrong Code!', { variant: 'error' });\r\n        }\r\n      });\r\n\r\n  };\r\n\r\n  const handlePasteClipboard = (event) => {\r\n    let data = event?.clipboardData?.getData('Text') || '';\r\n\r\n    data = data.split('');\r\n\r\n    [].forEach.call(document.querySelectorAll('#field-code'), (node, index) => {\r\n      node.value = data[index];\r\n      const fieldIndex = `code${index + 1}`;\r\n      setValue(fieldIndex, data[index]);\r\n    });\r\n  };\r\n\r\n  const handleChangeWithNextField = (event, handleChange) => {\r\n    const { maxLength, value, name } = event.target;\r\n    const fieldIndex = name.replace('code', '');\r\n\r\n    const fieldIntIndex = Number(fieldIndex);\r\n\r\n    if (value.length >= maxLength) {\r\n      if (fieldIntIndex < 6) {\r\n        const nextfield = document.querySelector(`input[name=code${fieldIntIndex + 1}]`);\r\n\r\n        if (nextfield !== null) {\r\n          nextfield.focus();\r\n        }\r\n      }\r\n    }\r\n\r\n    handleChange(event);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\r\n        {Object.keys(values).map((name, index) => (\r\n          <Controller\r\n            key={name}\r\n            name={`code${index + 1}`}\r\n            control={control}\r\n            render={({ field }) => (\r\n              <OutlinedInput\r\n                {...field}\r\n                id=\"field-code\"\r\n                autoFocus={index === 0}\r\n                placeholder=\"-\"\r\n                onChange={(event) => handleChangeWithNextField(event, field.onChange)}\r\n                inputProps={{\r\n                  maxLength: 1,\r\n                  sx: {\r\n                    p: 0,\r\n                    textAlign: 'center',\r\n                    width: { xs: 36, sm: 56 },\r\n                    height: { xs: 36, sm: 56 },\r\n                  },\r\n                }}\r\n              />\r\n            )}\r\n          />\r\n        ))}\r\n      </Stack>\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        loading={isSubmitting}\r\n        disabled={!isValid}\r\n        sx={{ mt: 3 }}\r\n      >\r\n        Verify\r\n      </LoadingButton>\r\n    </form>\r\n  );\r\n}\r\n","import { Link as RouterLink, useNavigate } from 'react-router-dom';\r\n// @mui\r\nimport jwtDecode from 'jwt-decode';\r\nimport axios from 'axios';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport { Box, Button, Link, Container, Typography } from '@mui/material';\r\n// layouts\r\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\r\n// routes\r\nimport { PATH_AUTH } from '../../routes/paths';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport Iconify from '../../components/Iconify';\r\n// sections\r\nimport { VerifyCodeForm } from '../../sections/auth/verify-code';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  height: '100%',\r\n  alignItems: 'center',\r\n  padding: theme.spacing(12, 0),\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function VerifyCode() {\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  return (\r\n    <Page title=\"Verify\" sx={{ height: 1 }}>\r\n      <RootStyle>\r\n        <LogoOnlyLayout />\r\n\r\n        <Container>\r\n          <Box sx={{ maxWidth: 480, mx: 'auto' }}>\r\n            <Button\r\n              size=\"small\"\r\n              component={RouterLink}\r\n              to={PATH_AUTH.login}\r\n              startIcon={<Iconify icon={'eva:arrow-ios-back-fill'} width={20} height={20} />}\r\n              sx={{ mb: 3 }}\r\n              onClick={() => {window.localStorage.removeItem('accessToken').then(navigate(PATH_AUTH.login))}}\r\n            >\r\n              Back\r\n            </Button>\r\n\r\n            <Typography variant=\"h3\" paragraph>\r\n              Please check your email!\r\n            </Typography>\r\n            <Typography sx={{ color: 'text.secondary' }}>\r\n              We have emailed a 6-digit confirmation code to acb@domain, please enter the code in below box to verify\r\n              your email.\r\n            </Typography>\r\n\r\n            <Box sx={{ mt: 5, mb: 3 }}>\r\n              <VerifyCodeForm />\r\n            </Box>\r\n\r\n            <Typography variant=\"body2\" align=\"center\">\r\n              Don’t have a code? &nbsp;\r\n\r\n              <Link variant=\"subtitle2\" underline=\"none\"  style={{cursor: 'pointer'}} onClick={() => {\r\n                const accessToken = window.localStorage.getItem('accessToken');\r\n                axios.defaults.headers.common = {\r\n                  'authorization': `${accessToken}`\r\n                };\r\n                const uid = jwtDecode(accessToken).userId\r\n                axios.get(`http://localhost:3000/resend-verification/${uid}`)\r\n                .then((res) => {\r\n                  enqueueSnackbar('Verification code sent', { variant: 'success' });\r\n                })\r\n                .catch((err) => {\r\n                  enqueueSnackbar('Something went wrong', { variant: 'error' });\r\n                  navigate(PATH_AUTH.login)\r\n                }) }\r\n              }>\r\n                Resend code\r\n              </Link>\r\n            </Typography>\r\n          </Box>\r\n        </Container>\r\n      </RootStyle>\r\n    </Page>\r\n  );\r\n}\r\n"],"names":["VerifyCodeForm","navigate","useNavigate","enqueueSnackbar","useSnackbar","VerifyCodeSchema","Yup","shape","code1","required","code2","code3","code4","code5","code6","useForm","mode","resolver","yupResolver","defaultValues","watch","control","setValue","handleSubmit","formState","isSubmitting","isValid","values","useEffect","document","addEventListener","handlePasteClipboard","onSubmit","data","accessToken","window","localStorage","getItem","id","jwtDecode","userId","variant","removeItem","PATH_AUTH","replace","code","Object","join","axios","verificationCode","then","res","newAccessToken","jwt","setItem","PATH_DASHBOARD","catch","error","response","status","event","clipboardData","getData","split","forEach","call","querySelectorAll","node","index","value","fieldIndex","Stack","direction","spacing","justifyContent","keys","map","name","render","field","OutlinedInput","autoFocus","placeholder","onChange","handleChange","target","maxLength","fieldIntIndex","Number","length","nextfield","querySelector","focus","handleChangeWithNextField","inputProps","sx","p","textAlign","width","xs","sm","height","LoadingButton","fullWidth","size","type","loading","disabled","mt","RootStyle","styled","display","alignItems","padding","theme","VerifyCode","Page","title","LogoOnlyLayout","Container","Box","maxWidth","mx","Button","component","RouterLink","to","startIcon","Iconify","icon","mb","onClick","Typography","paragraph","color","align","Link","underline","style","cursor","uid","err"],"sourceRoot":""}