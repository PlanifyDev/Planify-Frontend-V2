{"version":3,"file":"static/js/163.5d609d1b.chunk.js","mappings":"+aAoBe,SAASA,EAAT,GAAoD,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,WAC5CC,GAAeC,EAAAA,EAAAA,KAEfC,EAAsBC,EAAAA,KAAaC,MAAM,CAC7CC,MAAOF,EAAAA,KAAaE,MAAM,uCAAuCC,SAAS,uBAGtEC,GAAUC,EAAAA,EAAAA,IAAQ,CACtBC,UAAUC,EAAAA,EAAAA,GAAYR,GACtBS,cAAe,CAAEN,MAAO,sBAIxBO,EAEEL,EAFFK,aACaC,EACXN,EADFO,UAAaD,aAGTE,EAAQ,mCAAG,WAAOC,GAAP,0FAEP,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,IAAjC,IAFL,OAGTlB,EAAaoB,UACftB,IACAC,EAAWiB,EAAKX,QALL,+CAQbgB,QAAQC,MAAR,MARa,wDAAH,sDAYd,OACE,SAAC,KAAD,CAAcf,QAASA,EAASQ,SAAUH,EAAaG,GAAvD,UACE,UAACQ,EAAA,EAAD,CAAOC,QAAS,EAAhB,WACE,SAAC,KAAD,CAAcC,KAAK,QAAQC,MAAM,mBAEjC,SAACC,EAAA,EAAD,CAAeC,WAAS,EAACC,KAAK,QAAQC,KAAK,SAASC,QAAQ,YAAYC,QAASnB,EAAjF,gCAMP,C,eC1CKoB,GAAYC,EAAAA,EAAAA,IAAO,MAAPA,EAAc,kBAAgB,CAC9CC,QAAS,OACTC,UAAW,OACXC,WAAY,SACZC,eAAgB,SAChBC,QAL8B,EAAGC,MAKlBhB,QAAQ,GAAI,GALG,IAUjB,SAASiB,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOrC,EAAP,KAAcsC,EAAd,KACA,GAAwBD,EAAAA,EAAAA,WAAS,GAAjC,eAAOE,EAAP,KAAaC,EAAb,KAEA,OACE,SAACC,EAAA,EAAD,CAAMC,MAAM,iBAAiBC,GAAI,CAAEC,OAAQ,GAA3C,UACE,UAAChB,EAAD,YACE,SAACiB,EAAA,EAAD,KAEA,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,CAAKJ,GAAI,CAAEK,SAAU,IAAKC,GAAI,QAA9B,SACIV,GAiBA,UAACQ,EAAA,EAAD,CAAKJ,GAAI,CAAEO,UAAW,UAAtB,WACE,SAAC,KAAD,CAAUP,GAAI,CAAEQ,GAAI,EAAGF,GAAI,OAAQL,OAAQ,QAE3C,SAACQ,EAAA,EAAD,CAAY1B,QAAQ,KAAK2B,cAAY,EAArC,wCAGA,UAACD,EAAA,EAAD,wDAEE,4BAASpD,KACT,kBAHF,+BAOA,SAACsD,EAAA,EAAD,CAAQ9B,KAAK,QAAQE,QAAQ,YAAY6B,UAAWC,EAAAA,GAAYC,GAAIC,EAAAA,GAAAA,MAAiBf,GAAI,CAAEgB,GAAI,GAA/F,sBA7BF,iCACE,SAACP,EAAA,EAAD,CAAY1B,QAAQ,KAAKkC,WAAS,EAAlC,oCAGA,SAACR,EAAA,EAAD,CAAYT,GAAI,CAAEkB,MAAO,iBAAkBV,GAAI,GAA/C,+HAKA,SAAC3D,EAAD,CAAmBC,OAAQ,kBAAM+C,GAAQ,EAAd,EAAqB9C,WAAY,SAACoE,GAAD,OAAWxB,EAASwB,EAApB,KAE5D,SAACR,EAAA,EAAD,CAAQ/B,WAAS,EAACC,KAAK,QAAQ+B,UAAWC,EAAAA,GAAYC,GAAIC,EAAAA,GAAAA,MAAiBf,GAAI,CAAEgB,GAAI,GAArF,6BA4Bf,C","sources":["sections/auth/reset-password/ResetPasswordForm.js","pages/auth/ResetPassword.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\n// form\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\n// @mui\r\nimport { Stack } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// hooks\r\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\r\n// components\r\nimport { FormProvider, RHFTextField } from '../../../components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nResetPasswordForm.propTypes = {\r\n  onSent: PropTypes.func,\r\n  onGetEmail: PropTypes.func,\r\n};\r\n\r\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\r\n  const isMountedRef = useIsMountedRef();\r\n\r\n  const ResetPasswordSchema = Yup.object().shape({\r\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\r\n  });\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ResetPasswordSchema),\r\n    defaultValues: { email: 'demo@minimals.cc' },\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n      if (isMountedRef.current) {\r\n        onSent();\r\n        onGetEmail(data.email);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n          Reset Password\r\n        </LoadingButton>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n// @mui\r\nimport { styled } from '@mui/material/styles';\r\nimport { Box, Button, Container, Typography } from '@mui/material';\r\n// layouts\r\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\r\n// routes\r\nimport { PATH_AUTH } from '../../routes/paths';\r\n// components\r\nimport Page from '../../components/Page';\r\n// sections\r\nimport { ResetPasswordForm } from '../../sections/auth/reset-password';\r\n// assets\r\nimport { SentIcon } from '../../assets';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  minHeight: '100%',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  padding: theme.spacing(12, 0),\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ResetPassword() {\r\n  const [email, setEmail] = useState('');\r\n  const [sent, setSent] = useState(false);\r\n\r\n  return (\r\n    <Page title=\"Reset Password\" sx={{ height: 1 }}>\r\n      <RootStyle>\r\n        <LogoOnlyLayout />\r\n\r\n        <Container>\r\n          <Box sx={{ maxWidth: 480, mx: 'auto' }}>\r\n            {!sent ? (\r\n              <>\r\n                <Typography variant=\"h3\" paragraph>\r\n                  Forgot your password?\r\n                </Typography>\r\n                <Typography sx={{ color: 'text.secondary', mb: 5 }}>\r\n                  Please enter the email address associated with your account and We will email you a link to reset your\r\n                  password.\r\n                </Typography>\r\n\r\n                <ResetPasswordForm onSent={() => setSent(true)} onGetEmail={(value) => setEmail(value)} />\r\n\r\n                <Button fullWidth size=\"large\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 1 }}>\r\n                  Back\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <Box sx={{ textAlign: 'center' }}>\r\n                <SentIcon sx={{ mb: 5, mx: 'auto', height: 160 }} />\r\n\r\n                <Typography variant=\"h3\" gutterBottom>\r\n                  Request sent successfully\r\n                </Typography>\r\n                <Typography>\r\n                  We have sent a confirmation email to &nbsp;\r\n                  <strong>{email}</strong>\r\n                  <br />\r\n                  Please check your email.\r\n                </Typography>\r\n\r\n                <Button size=\"large\" variant=\"contained\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 5 }}>\r\n                  Back\r\n                </Button>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </Container>\r\n      </RootStyle>\r\n    </Page>\r\n  );\r\n}\r\n"],"names":["ResetPasswordForm","onSent","onGetEmail","isMountedRef","useIsMountedRef","ResetPasswordSchema","Yup","shape","email","required","methods","useForm","resolver","yupResolver","defaultValues","handleSubmit","isSubmitting","formState","onSubmit","data","Promise","resolve","setTimeout","current","console","error","Stack","spacing","name","label","LoadingButton","fullWidth","size","type","variant","loading","RootStyle","styled","display","minHeight","alignItems","justifyContent","padding","theme","ResetPassword","useState","setEmail","sent","setSent","Page","title","sx","height","LogoOnlyLayout","Container","Box","maxWidth","mx","textAlign","mb","Typography","gutterBottom","Button","component","RouterLink","to","PATH_AUTH","mt","paragraph","color","value"],"sourceRoot":""}